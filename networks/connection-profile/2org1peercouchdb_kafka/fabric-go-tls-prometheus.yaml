name: Fabric
version: "1.0"
mutual-tls: false

caliper:
  blockchain: fabric
  command:
    start: export FABRIC_VERSION=2.0.0;export FABRIC_CA_VERSION=1.4.4;docker-compose -f networks/prometheus-grafana/docker-compose-fabric.yaml up -d;sleep 3s;docker-compose -f networks/2org1peercouchdb_kafka/docker-compose-tls-prometheus.yaml up -d;sleep 3s
    end: sleep 3s
    #end: docker-compose -f networks/prometheus-grafana/docker-compose-fabric.yaml down;docker-compose -f networks/2org1peercouchdb_raft/docker-compose-tls-prometheus.yaml down;(test -z \"$(docker ps -aq)\") || docker rm $(docker ps -aq);(test -z \"$(docker images dev* -q)\") || docker rmi $(docker images dev* -q);rm -rf /tmp/hfc-*

info:
  Version: 2.1.0
  Size: 2 Orgs with 1 Peer
  Orderer: Kafka
  Distribution: Single Host
  StateDB: CouchDB

clients:
  client0.org1.example.com:
    client:
      organization: Org1
      credentialStore:
        path: /tmp/hfc-kvs/org1
        cryptoStore:
          path: /tmp/hfc-cvs/org1
      clientPrivateKey:
        path: networks/2org1peercouchdb_kafka/config_kafka/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/msp/keystore/key.pem
      clientSignedCert:
        path: networks/2org1peercouchdb_kafka/config_kafka/crypto-config/peerOrganizations/org1.example.com/users/User1@org1.example.com/msp/signcerts/User1@org1.example.com-cert.pem

  client0.org2.example.com:
    client:
      organization: Org2
      credentialStore:
        path: /tmp/hfc-kvs/org2
        cryptoStore:
          path: /tmp/hfc-cvs/org2
      clientPrivateKey:
        path: networks/2org1peercouchdb_kafka/config_kafka/crypto-config/peerOrganizations/org2.example.com/users/User1@org2.example.com/msp/keystore/key.pem
      clientSignedCert:
        path: networks/2org1peercouchdb_kafka/config_kafka/crypto-config/peerOrganizations/org2.example.com/users/User1@org2.example.com/msp/signcerts/User1@org2.example.com-cert.pem

channels:
  mychannel:
    configBinary: networks/2org1peercouchdb_kafka/config_kafka/mychannel.tx
    created: false

    orderers:
      - orderer0.example.com
      - orderer1.example.com
    peers:
      peer0.org1.example.com:
        eventSource: true
      peer0.org2.example.com:
        eventSource: true

    chaincodes:
      - id: fabcar
        version: v0
        language: golang
        path: fabric/samples/fabcar/go

organizations:
  Org1:
    mspid: Org1MSP
    peers:
      - peer0.org1.example.com
    certificateAuthorities:
      - ca.org1.example.com
    adminPrivateKey:
      path: networks/2org1peercouchdb_kafka/config_kafka/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/key.pem
    signedCert:
      path: networks/2org1peercouchdb_kafka/config_kafka/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/Admin@org1.example.com-cert.pem

  Org2:
    mspid: Org2MSP
    peers:
      - peer0.org2.example.com
    certificateAuthorities:
      - ca.org2.example.com
    adminPrivateKey:
      path: networks/2org1peercouchdb_kafka/config_kafka/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/keystore/key.pem
    signedCert:
      path: networks/2org1peercouchdb_kafka/config_kafka/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/signcerts/Admin@org2.example.com-cert.pem

orderers:
  orderer0.example.com:
    url: grpcs://localhost:7050
    grpcOptions:
      ssl-target-name-override: orderer0.example.com
    tlsCACerts:
      path: networks/2org1peercouchdb_kafka/config_kafka/crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
  orderer1.example.com:
    url: grpcs://localhost:8050
    grpcOptions:
      ssl-target-name-override: orderer1.example.com
    tlsCACerts:
      path: networks/2org1peercouchdb_kafka/config_kafka/crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

peers:
  peer0.org1.example.com:
    url: grpcs://localhost:7051
    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com
      grpc.keepalive_time_ms: 600000
    tlsCACerts:
      path: networks/2org1peercouchdb_kafka/config_kafka/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/tlscacerts/tlsca.org1.example.com-cert.pem

  peer0.org2.example.com:
    url: grpcs://localhost:8051
    grpcOptions:
      ssl-target-name-override: peer0.org2.example.com
      grpc.keepalive_time_ms: 600000
    tlsCACerts:
      path: networks/2org1peercouchdb_kafka/config_kafka/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp/tlscacerts/tlsca.org2.example.com-cert.pem

certificateAuthorities:
  ca.org1.example.com:
    url: https://localhost:7054
    httpOptions:
      verify: false
    tlsCACerts:
      path: networks/2org1peercouchdb_kafka/config_kafka/crypto-config/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem
    registrar:
      - enrollId: admin
        enrollSecret: adminpw

  ca.org2.example.com:
    url: https://localhost:8054
    httpOptions:
      verify: false
    tlsCACerts:
      path: networks/2org1peercouchdb_kafka/config_kafka/crypto-config/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem
    registrar:
      - enrollId: admin
        enrollSecret: adminpw
